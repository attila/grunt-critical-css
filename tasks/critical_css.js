/*
 * grunt-critical-css
 * https://github.com/attilab/grunt-critical-css
 *
 * Copyright (c) 2015 Attila Beregszaszi
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {
  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks
  var criticalCss = require('critical-css');

  grunt.registerMultiTask('critical_css', 'Grunt task to extract Above the Fold CSS for a URL', function() {
    if (!this.data.url) {
      throw new TypeError('Missing url parameter.');
    }
    if (!this.data.dest) {
      throw new TypeError('Missing dest parameter.');
    }

    var done = this.async();
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      width: 1200,
      height: 900,
      excludeSelectors: [],
      enabledOrigins: [],
      keepInlineStyles: false,
      ignoreConsole: true,
      maxBuffer: 800*1024,
    });
    var dest = this.data.dest;
    var urls = [];
    var out = '';

    // Convert url to an array if a single url was given.
    switch (grunt.util.kindOf(this.data.url)) {
      case 'string':
        urls.push(this.data.url);
        break;
      case 'array':
        urls = this.data.url;
        break;
    }

    /**
     * Execute criticalCss on a collection of URLs using recursion.
     */
    function runBatch(i) {
      if (i < urls.length) {
        criticalCss.generate(urls[i], options, function(err, output) {
      if (err) {
            grunt.log.error(urls[i]);
            grunt.fail.fatal(err.message);
      }
          else {
            processStep(output, urls[i], i);

            runBatch(i + 1);
          }
    });
      }
      else {
        finalise();
      }
    }

    /**
     * Append the result of a single URL.
     */
    function processStep(output, url, key) {
      grunt.log.ok(url);

      out += '/* Generated by critical-css.js on ' + url + ' */\u000a' + output;
    }

    /**
     * Write the file with all the results.
     */
    function finalise() {
      grunt.file.write(dest, out);
      grunt.log.ok('Output written to: "' + dest +'".');
      done();
    }

    // Execute.
    runBatch(0);
  });
};
